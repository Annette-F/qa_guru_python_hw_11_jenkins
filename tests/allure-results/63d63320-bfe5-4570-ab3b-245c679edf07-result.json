{"name": "test_student_registration_form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.all(('css selector', '.custom-checkbox')).element_by(has exact text Sports).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <div class=\"custom-control custom-checkbox custom-control-inline\">...</div> is not clickable at point (765, 829). Other element would receive the click: <div>...</div>\n  (Session info: chrome=100.0.4896.60)\nScreenshot: file://C:\\Users\\Anna\\.selene\\screenshots\\1721504784727\\1721504784727.png\nPageSource: file://C:\\Users\\Anna\\.selene\\screenshots\\1721504784727\\1721504784727.html", "trace": "fn = <selene.core.wait.Command object at 0x000001D750A106B0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:61: in __call__\n    return self._fn(entity)\n..\\.venv\\Lib\\site-packages\\selene\\core\\entity.py:525: in raw_click\n    element.locate().click()\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001D7509AFA40>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#20 0x561dc1ff1b08 \\\\u003Cunknown>\\\\n#21 0x561dc200b5dd \\\\u003Cunknown>\\\\n#22 0x7f69a842a609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <div class=\"custom-control custom-checkbox custom-control-inline\">...</div> is not clickable at point (765, 829). Other element would receive the click: <div>...</div>\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x561dc1f8e013 <unknown>\nE       #1 0x561dc1cf0a08 <unknown>\nE       #2 0x561dc1d2e5a1 <unknown>\nE       #3 0x561dc1d2c188 <unknown>\nE       #4 0x561dc1d29824 <unknown>\nE       #5 0x561dc1d285c2 <unknown>\nE       #6 0x561dc1d1be19 <unknown>\nE       #7 0x561dc1d44932 <unknown>\nE       #8 0x561dc1d1b6d3 <unknown>\nE       #9 0x561dc1d44a3e <unknown>\nE       #10 0x561dc1d57b94 <unknown>\nE       #11 0x561dc1d44823 <unknown>\nE       #12 0x561dc1d1a08a <unknown>\nE       #13 0x561dc1d1b1e5 <unknown>\nE       #14 0x561dc1fbbe5d <unknown>\nE       #15 0x561dc1fd5061 <unknown>\nE       #16 0x561dc1fbdbb5 <unknown>\nE       #17 0x561dc1fd5e08 <unknown>\nE       #18 0x561dc1fb12f0 <unknown>\nE       #19 0x561dc1ff1988 <unknown>\nE       #20 0x561dc1ff1b08 <unknown>\nE       #21 0x561dc200b5dd <unknown>\nE       #22 0x7f69a842a609 <unknown>\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.tag('registration_form')\n    @allure.severity(Severity.CRITICAL)\n    @allure.label('owner', 'Annette-F')\n    @allure.feature('Полная форма регистрация нового студента')\n    @allure.story('Регистрация нового студента')\n    @allure.link('https://demoqa.com/automation-practice-form', name='Demoqa')\n    def test_student_registration_form():\n        with allure.step('Открываем форму регистрации студента'):\n            registration_page = StudentRegistrationPage()\n            registration_page.open()\n    \n        # WHEN\n        with allure.step('Заполняем поле ввода First Name'):\n            registration_page.type_first_name('Anna')\n    \n        with allure.step('Заполняем поле ввода Last Name'):\n            registration_page.type_last_name('Fedorova')\n    \n        with allure.step('Заполняем поле ввода Email'):\n            registration_page.type_email('email@mail.com')\n    \n        with allure.step('Отмечаем радио-баттон Gender'):\n            registration_page.select_gender('Female')\n    \n        with allure.step('Заполняем поле ввода Mobile Number'):\n            registration_page.type_user_number('9001234567')\n    \n        with allure.step('Указываем дату рождения'):\n            registration_page.fill_date_of_birth('1982', 'March', '18')\n    \n        with allure.step('Заполняем поле ввода Subjects'):\n            registration_page.type_subject('Computer Science')\n    \n        with allure.step('Отмечаем чекбокс Hobbies'):\n>           registration_page.type_hobbies('Sports', 'Reading')\n\ntest_registration_page.py:40: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\pages\\form_page.py:34: in type_hobbies\n    browser.all('.custom-checkbox').element_by(have.exact_text(hobby1)).click()\n..\\.venv\\Lib\\site-packages\\selene\\core\\entity.py:540: in click\n    self.wait.for_(\n..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x000001D750A106B0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.all(('css selector', '.custom-checkbox')).element_by(has exact text Sports).click\nE                   \nE                   Reason: ElementClickInterceptedException: element click intercepted: Element <div class=\"custom-control custom-checkbox custom-control-inline\">...</div> is not clickable at point (765, 829). Other element would receive the click: <div>...</div>\nE                     (Session info: chrome=100.0.4896.60)\nE                   Screenshot: file://C:\\Users\\Anna\\.selene\\screenshots\\1721504784727\\1721504784727.png\nE                   PageSource: file://C:\\Users\\Anna\\.selene\\screenshots\\1721504784727\\1721504784727.html\n\n..\\.venv\\Lib\\site-packages\\selene\\core\\wait.py:148: TimeoutException"}, "steps": [{"name": "Открываем форму регистрации студента", "status": "passed", "start": 1721504789833, "stop": 1721504791596}, {"name": "Заполняем поле ввода First Name", "status": "passed", "start": 1721504791596, "stop": 1721504791791}, {"name": "Заполняем поле ввода Last Name", "status": "passed", "start": 1721504791791, "stop": 1721504792006}, {"name": "Заполняем поле ввода Email", "status": "passed", "start": 1721504792006, "stop": 1721504792249}, {"name": "Отмечаем радио-баттон Gender", "status": "passed", "start": 1721504792249, "stop": 1721504792654}, {"name": "Заполняем поле ввода Mobile Number", "status": "passed", "start": 1721504792654, "stop": 1721504792814}, {"name": "Указываем дату рождения", "status": "passed", "start": 1721504792814, "stop": 1721504793791}, {"name": "Заполняем поле ввода Subjects", "status": "passed", "start": 1721504793791, "stop": 1721504794135}, {"name": "Отмечаем чекбокс Hobbies", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.all(('css selector', '.custom-checkbox')).element_by(has exact text Sports).click\n\nReason: ElementClickInterceptedException: element click intercepted: Element <div class=\"custom-control custom-checkbox custom-control-inline\">...</div> is not clickable at point (765, 829). Other element would receive the click: <div>...</div>\n  (Session info: chrome=100.0.4896.60)\nScreenshot: file://C:\\Users\\Anna\\.selene\\screenshots\\1721504784727\\1721504784727.png\nPageSource: file://C:\\Users\\Anna\\.selene\\screenshots\\1721504784727\\1721504784727.html\n\n", "trace": "  File \"C:\\Users\\Anna\\PycharmProjects\\qa_guru_python_hw_11_jenkins\\tests\\test_registration_page.py\", line 40, in test_student_registration_form\n    registration_page.type_hobbies('Sports', 'Reading')\n  File \"C:\\Users\\Anna\\PycharmProjects\\qa_guru_python_hw_11_jenkins\\pages\\form_page.py\", line 34, in type_hobbies\n    browser.all('.custom-checkbox').element_by(have.exact_text(hobby1)).click()\n  File \"C:\\Users\\Anna\\PycharmProjects\\qa_guru_python_hw_11_jenkins\\.venv\\Lib\\site-packages\\selene\\core\\entity.py\", line 540, in click\n    self.wait.for_(\n  File \"C:\\Users\\Anna\\PycharmProjects\\qa_guru_python_hw_11_jenkins\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Anna\\PycharmProjects\\qa_guru_python_hw_11_jenkins\\.venv\\Lib\\site-packages\\selene\\core\\wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1721504794135, "stop": 1721504799872}], "start": 1721504789833, "stop": 1721504799879, "uuid": "32df10fd-e9bb-478a-a159-7881ad404c97", "historyId": "f83f80b35ded92637548ad120ce554a2", "testCaseId": "f83f80b35ded92637548ad120ce554a2", "fullName": "tests.test_registration_page#test_student_registration_form", "labels": [{"name": "severity", "value": "critical"}, {"name": "tag", "value": "registration_form"}, {"name": "feature", "value": "Полная форма регистрация нового студента"}, {"name": "story", "value": "Регистрация нового студента"}, {"name": "owner", "value": "Annette-F"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_registration_page"}, {"name": "host", "value": "LAPTOP-TIV32K5E"}, {"name": "thread", "value": "17204-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_registration_page"}], "links": [{"type": "link", "url": "https://demoqa.com/automation-practice-form", "name": "Demoqa"}]}